server.port=8080
server.servlet.context-path=

spring.application.name=demo
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/docker?useUnicode=true&characterEncoding=utf8&characterSetResults=utf8&useSSL=false
#spring.datasource.url=jdbc:mysql://host.docker.internal:3306/docker?useUnicode=true&characterEncoding=utf8&characterSetResults=utf8&useSSL=false
spring.datasource.username=root
spring.datasource.password=tiger
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
# apollo
app.id=demo-apollo
apollo.bootstrap.enabled=true
# ?? application ?? ? TEST1.Common Namespace ???
apollo.bootstrap.namespaces=application

# kafka
# ?? Kafka Broker ???????????????
spring.kafka.bootstrap-servers:127.0.0.1:9092 
# Kafka Producer ???
# 0-????1-leader ???all-?? leader ? follower ???
spring.kafka.producer.acks=1
# ?????????????
spring.kafka.producer.retries=3
# ??? key ????
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# ??? value ????
spring.kafka.producer.value-serializer:org.springframework.kafka.support.serializer.JsonSerializer 
# Kafka Consumer ???
# ??????????????? earliest ?????? https://blog.csdn.net/lishuangzhe7047/article/details/74530417 ??
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=demo.mq.message
